// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlatformExternal The configuration for the external platform type.
//
// swagger:model platform_external
type PlatformExternal struct {

	// Holds the infrastructure provider name.
	// Enum: [Unknown oci]
	PlatformName *string `json:"platform_name,omitempty"`
}

// Validate validates this platform external
func (m *PlatformExternal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlatformName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var platformExternalTypePlatformNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","oci"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		platformExternalTypePlatformNamePropEnum = append(platformExternalTypePlatformNamePropEnum, v)
	}
}

const (

	// PlatformExternalPlatformNameUnknown captures enum value "Unknown"
	PlatformExternalPlatformNameUnknown string = "Unknown"

	// PlatformExternalPlatformNameOci captures enum value "oci"
	PlatformExternalPlatformNameOci string = "oci"
)

// prop value enum
func (m *PlatformExternal) validatePlatformNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, platformExternalTypePlatformNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PlatformExternal) validatePlatformName(formats strfmt.Registry) error {
	if swag.IsZero(m.PlatformName) { // not required
		return nil
	}

	// value enum
	if err := m.validatePlatformNameEnum("platform_name", "body", *m.PlatformName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this platform external based on context it is used
func (m *PlatformExternal) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlatformExternal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlatformExternal) UnmarshalBinary(b []byte) error {
	var res PlatformExternal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
